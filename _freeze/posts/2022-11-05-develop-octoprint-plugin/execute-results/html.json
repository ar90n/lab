{
  "hash": "5f88bb3e672be3a2f8eac640a6426a25",
  "result": {
    "markdown": "---\ntitle: OctoPrintのプラグインを作ってみる\ndate: '2022-11-05'\ncategories:\n  - Python\n  - 3Dプリンタ\nimage: /assets/img/2022-11-05-develop-octoprint-plugin/sidebar.png\nformat:\n  html:\n    code-fold: false\nnocite: |\n  @octoprint\n---\n\n## はじめに\nOctoPrintからSwitchBot PlugのOn/Offを制御する[プラグイン](https://github.com/ar90n/OctoPrint-SwitchBot-Plug)を作ってみました。\n今回、このプラグインの作成を通してハマった点のメモを残しておきます。\n\n## やったこと\n* OctoPrintからSwitchBot PlugのOn/Offを制御するプラグインを作成\n\n## 作ったものについて\n常時3Dプリンタを起動しているのは無駄なので、電源の管理にSwitchBot Plugを使ってみました。スマホからSwitchBot Plugを操作することはできるのですが、折角なのでOctoPrintから操作したいと思いプラグインを作成しました。\n\n[![](https://gh-card.dev/repos/ar90n/OctoPrint-SwitchBot-Plug.svg)](https://github.com/ar90n/OctoPrint-SwitchBot-Plug)\n\nこのプラグインを導入すると、以下の様にSwitchBot PlugのOn/Offを制御するボタンがサイドバーに出現します。\n\n![](/assets/img/2022-11-05-develop-octoprint-plugin/sidebar.png)\n\n仕組みとしては、シンプルにフロントエンドのボタン押下に応じてSwitchBot APIを叩くだけです。SwitchBot APIはサーバー側から呼び出しています。後から振り返ってみると、フロントエンド側から直接SwitchBot APIを叩いても良かったかなと思っています。\n\n## OctoPrintプラグインについて\nOctoPrintプラグインの作成については、[Plugin Tutorial](https://docs.octoprint.org/en/master/plugins/gettingstarted.html)を参考にするのが手っ取り早いと思います。\nこのチュートリアルでは、プラグインの保存先として`~/.octoprint/plugins`が紹介されています。\nしかしながら、私の環境では上記ディレクトリに配置したプラグインは読み込まれませんでした。\nその様な場合、プラグインの保存先ディレクトリはOctoPrintのブートログから確認することができます。\n\n```bash\n...\n\n2022-11-02 01:18:22,845 - octoprint.util.connectivity.connectivity_checker - INFO - Resolving octoprint.org is working\n2022-11-02 01:18:22,846 - octoprint.plugin.core - INFO - Loading plugins from /Users/argon/workspace/OctoPrint/src/octoprint/plugins, /Users/argon/Library/Application Support/OctoPrint/plugins and installed plugin packages...\n2022-11-02 01:18:23,148 - octoprint.plugin.core - INFO - Plugin Pi Support Plugin (2022.6.13) did not pass check, not loading.\n\n...\n```\n\nまた、上記チュートリアルで作成するプラグインはフロントエンド側の処理のみで完結しています。\nそこで、ここではサーバー側との連携について少しだけメモを残しておくことにします。\n\n### サーバー側で処理を行う\nOctoPrintプラグインにおいて、フロントエンド<->サーバー間の連携は単純にWebAPIを介して行われます。\nサーバー側で処理を行う場合、以下の何かのクラスを継承して必要なメソッドを実装します。\n\n* octoprint.plugin.SimpleApiPlugin\n* octoprint.plugin.BlueprintPlugin\n\n前者は、`GET`と`POST`に応じた`get_api_commands`と`on_api_command`とを実装することでAPIを提供します。\n後者はFlaskのBlueprintを利用してAPIを提供します。\n\n今回は以下の様に`BlueprintPlugin`を継承してAPIを提供しています。\n\n```python\nclass SwitchBotPlugPlugin(\n    octoprint.plugin.SettingsPlugin,\n    octoprint.plugin.AssetPlugin,\n    octoprint.plugin.TemplatePlugin,\n    octoprint.plugin.BlueprintPlugin,\n):\n\n    ...\n\n    @octoprint.plugin.BlueprintPlugin.route(\"/turnon\", methods=[\"POST\"])\n    def turnon(self):\n        self._logger.info(\"turnon\")\n        ...\n\n    @octoprint.plugin.BlueprintPlugin.route(\"/turnoff\", methods=[\"POST\"])\n    def turnoff(self):\n        self._logger.info(\"turnoff\")\n        ...\n\n    @octoprint.plugin.BlueprintPlugin.route(\"/status\", methods=[\"GET\"])\n    def status(self):\n        self._logger.info(\"status\")\n        ...\n```\n\n\n### JavaScript Clientについて\nサーバー側から提供されるのは単純なWeb APIであるため、フロントエンドからは`fetch`や`axios`などを用いて呼び出すことももちろん可能です。\nしかしながら、OctoPrintでは`OctoPrintClient`というクラスが提供されており、準備したWeb API用のクライアントをinjectionして、このクラスを経由して使用することが推奨されてるようです。\n\n以下にサンプルコードを参考に自作プラグイン用クライアントをinjectionする例を示します。\n\n```javascript\n(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"OctoPrintClient\"], factory);\n    } else {\n        factory(window.OctoPrintClient);\n    }\n})(window || this, function(OctoPrintClient) {\n    var SwitchBotPlug = function(base) {\n        this.base = base;\n        this.baseUrl = OctoPrint.getBlueprintUrl(\"switchbot_plug\");\n    };\n\n    SwitchBotPlug.prototype.turnon = function() {\n        const url = `${this.baseUrl}/turnon`;\n        return OctoPrint.post(url, {}, {contentType: \"application/json\"});\n    };\n\n    SwitchBotPlug.prototype.turnoff = function() {\n        const url = `${this.baseUrl}/turnoff`;\n        return OctoPrint.post(url, {}, {contentType: \"application/json\"});\n    };\n\n    SwitchBotPlug.prototype.status = function() {\n        const url = `${this.baseUrl}/status`;\n        return OctoPrint.get(url)\n    };\n\n    OctoPrintClient.registerPluginComponent(\"switchbot_plug\", SwitchBotPlug);\n    return SwitchBotPlug;\n});\n```\n\n\n## 参考 \n::: {#refs}\n:::\n\n",
    "supporting": [
      "2022-11-05-develop-octoprint-plugin_files"
    ],
    "filters": [],
    "includes": {}
  }
}