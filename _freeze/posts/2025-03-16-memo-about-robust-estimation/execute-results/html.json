{
  "hash": "8700c03d721db365826a95897e666a60",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: M推定を用いたPCAについてのメモ\ndate: 2025-03-16\ncategories: [Python, 機械学習]\nformat:\n  html:\n    code-fold: false\njupyter: python3\nnocite: |\n  @藤澤洋徳2017-07-31\n---\n\n\n\n## はじめに\n\n外乱を含むデータに対して、精度よく統計量を推定する方法にロバスト推定があります。このロバスト推定の代表的な方法の一つに M推定があります。\n\n直近、外乱を含むデータに対して M推定を用いた PCA を適用する機会があったので、このことに関する覚書を残します。\n\n## やったこと\n\n- M推定の基本 (ロバスト損失関数やスコア方程式など) を軽く振り返りました。  \n- PCAをM推定で定式化する手順を、二乗誤差をロバスト損失に置き換えるイメージでまとめました。  \n- IRLS (Iteratively Reweighted Least Squares) の考え方を使って、ロバスト損失を重み付き最小二乗へ落とし込む流れを示しました。  \n- ノイズを含む２次元データに対してロバストPCAを実行し、外れ値があっても安定した直線が推定可能なことを確認しました。\n\n## ロバストPCAの概略\n\n通常のPCAは、二乗誤差を最小化する形で主成分を求めるため、外乱 (外れ値) に対して頑健ではありません。これは、外れ値が1つでもあると、主成分方向が大きく変化してしまう場合があることを意味します。\n\n一方、ロバストPCAは、ロバスト推定により外れ値があっても推定結果が極端に変化しないように工夫されています。手法の種類は複数ありますが、本記事では **M推定** と呼ばれるロバスト推定の代表的枠組みをPCAに適用しました。\n\n## M推定の基本\n\n通常の二乗誤差最小化は、以下の損失を最小化する形です。\n\n$$\n\\sum_i \\Bigl(y_i - x_i^\\top \\beta\\Bigr)^2\n$$\n\nこれは外れ値の二乗誤差が大きく計上されるため、外れ値に敏感になります。\n\nM推定では一般化した損失 $\\rho(\\cdot)$ を導入し、これを最小化します。この $\\rho(\\cdot)$ にはHuber損失やTukey Biweight損失などが良く用いられます。これらの損失は、一定範囲までは二乗誤差に近い振る舞いをしつつ、大きな残差を持つ点については重みを小さくすることで外れ値の影響を抑えます。\n\nここで、$\\rho'(r) = \\psi(r)$ と定義すると、損失の最小化は以下のように表現できます。\n\n$$\n\\sum_i \\psi\\bigl(r_i(\\beta)\\bigr) \\;=\\; 0\n$$\n\nこの時、$r_i(\\beta)$は目的値とパラメータ $\\beta$ による推定値との残差を表します。\n具体的には、回帰の場合は $y_i - x_i^\\top \\beta$ が、PCAの場合は $\\|x_i - \\mu - W z_i\\|$ が該当します。\n\nまた、上式は対して $w_i = \\frac{\\psi\\bigl(r_i(\\beta)\\bigr)}{(r_i(\\beta)}$ を導入すると\n\n$$\n\\sum_i \\frac{\\psi\\bigl(r_i(\\beta)\\bigr)}{(r_i(\\beta)} r_i(\\beta) \\;=\\;  \\sum_i w_i r_i(\\beta)  \\;=\\; 0\n$$\n\nと記述することが可能です。これは、「重み付き最小二乗」の勾配条件と同等であることが解ります。\n\n## M推定によるPCAの定式化\n\n通常のPCAでは、以下のように再構成誤差の二乗和を最小化します。\n\n$$\n\\min_{\\mu,\\,W,\\,\\{z_i\\}}\n\\quad\n\\sum_{i=1}^N \\|\\,x_i - \\mu - W z_i\\|^2\n$$\n\nこれを、より一般的なロバスト損失に置き換えると、以下のように表現できます。\n\n$$\n\\min_{\\mu,\\,W,\\,\\{z_i\\}}\n\\quad\n\\sum_{i=1}^N \\rho \\Bigl(\\|\\,x_i - \\mu - W z_i\\|\\Bigr)\n$$\n\nロバスト損失 $\\rho$ を用いることで、大きい残差 (外れ値) に対して損失が飽和します。\nこれにより、結果として外れ値の影響が二乗誤差よりも抑えられます。\n\n今回は、このロバスト損失として **Huber 損失** を採用します。Huber 損失の定義は以下の通りです。\n\n$$\n\\rho_{\\delta}(r) \\;=\\;\n\\begin{cases}\n\\displaystyle\n\\frac{1}{2}\\,r^2,\n& \\quad |r| \\le \\delta,\\\\[1em]\n\\displaystyle\n\\delta\\,|r| \\;-\\;\\frac{1}{2}\\,\\delta^2,\n& \\quad |r| > \\delta.\n\\end{cases}\n$$\n\n以上のことから、Huber 損失は $|r|$ が小さい領域では通常の二乗誤差に、$|r|$ が十分大きい領域では絶対値誤差になります。\n\n## IRLS (Iteratively Reweighted Least Squares) によるM推定の実現\n\nロバスト損失を含む問題は、解を直接求めることが難しい場合が多いです。\n今回も解を直接求めることが困難であるため、以下のような **反復法 (IRLS)** を使用します。\n\n1. 現在の推定値 (例: $\\mu^{(k)}, W^{(k)}, z_i^{(k)}$) で各サンプルの残差を計算する  \n2. ロバスト損失の微分 $\\psi(r)$ に基づき、重み $w_i = \\dfrac{\\psi(r_i)}{\\,r_i\\,}$ を計算する\n3. 「重み付き最小二乗問題」として  \n    $$\n     \\sum_{i=1}^N\n     w_i \\,\\bigl\\|\\,x_i - \\mu - W z_i\\bigr\\|^2\n    $$\n   を最小化する\n4. 解が得られたら再び残差を計算し、1. から 3. を繰り返す\n\n以下にHuber損失を採用した際の重み $w_i$ について具体例を示します。\nまず、Huber損失 $\\rho_{\\delta}(r)$ の微分 $\\psi_{\\delta}(r)$ は以下のように記述されます。\n\n$$\n\\psi_{\\delta}(r)\n\\;=\\;\n\\begin{cases}\nr, & \\quad |r| \\le \\delta,\\\\[0.5em]\n\\delta \\,\\mathrm{sign}(r), & \\quad |r| > \\delta.\n\\end{cases}\n$$\n\nしたがって、重み $w_i$ は\n\n$$\nw_i(r_i)\n\\;=\\;\n\\begin{cases}\n\\displaystyle\n\\frac{r_i}{r_i} \\;=\\; 1, & \\quad |r_i|\\le \\delta,\\\\[1em]\n\\displaystyle\n\\frac{\\delta\\,\\mathrm{sign}(r_i)}{r_i} \\;=\\;\\frac{\\delta}{\\,|r_i|\\,},\n& \\quad |r_i| > \\delta,\n\\end{cases}\n$$\n\nとなります。これは、残差の絶対値が $\\delta$ 以下なら $1$ に、$\\delta$ より大きい場合は $\\delta / |r_i|$ になります。これにより、外れ値は重みが極端に小さくなり影響が抑制されます。\n\n## Pythonによる実装\n\nここではノイズを含む2次元データに対して前述のロバストPCAを適用し、主成分を推定します。\n\n### データ生成\n\n実験に用いるデータは以下のように生成しました。\n\n::: {#d64755d4 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport numpy as np\n\ndef make_cov_matrix(theta_deg=30, lambda1=4.0, lambda2=1.0):\n    theta = np.radians(theta_deg)\n    c = np.cos(theta)\n    s = np.sin(theta)\n    R = np.array([[c, -s],\n                  [s,  c]])\n    D = np.diag([lambda1, lambda2])\n    Sigma = R @ D @ R.T # Σ = R D R^T\n    return Sigma\n\ndef generate_2d_gaussian_with_outliers(n=100, outlier_ratio=0.15, random_seed=42):\n    np.random.seed(random_seed)\n    \n    mu = np.array([2.0, -1.0])\n    Sigma = make_cov_matrix(theta_deg=30, lambda1=6.5, lambda2=1.0)\n\n    X = np.random.multivariate_normal(mean=mu, cov=Sigma, size=n)\n\n    num_outliers = int(n * outlier_ratio)\n    if num_outliers > 0:\n        idx_out = np.random.choice(n, size=num_outliers, replace=False)\n        X[idx_out] += np.random.uniform(-15, 15, size=(num_outliers, 2))\n\n    return X\n\nX_data = generate_2d_gaussian_with_outliers(n=200, outlier_ratio=0.15, random_seed=42)\nplt.scatter(X_data[:,0], X_data[:,1], alpha=0.6)\nplt.title(\"2D Gaussian (rotated cov) + Outliers\")\nplt.axis(\"equal\")\nplt.show()\n```\n:::\n\n\n### ロバストPCA\n\n通常のPCAによる推定結果を初期値とし、IRLSを適用します。\n\n::: {#87713025 .cell execution_count=3}\n``` {.python .cell-code}\ndef huber_loss_deriv(r, delta=1.0):\n    return np.where(np.abs(r) <= delta, r, delta * np.sign(r))\n\ndef robust_pca_1d(\n    X,\n    max_iter=20,\n    delta=1.0,\n    tol=1e-5\n):\n    n, d = X.shape\n    assert d == 2, \"This function is for 2D data only.\"\n\n    # 初期値の推定\n    mu = np.mean(X, axis=0)\n    X_centered = X - mu\n    cov_init = (X_centered.T @ X_centered) / n\n    eigvals, eigvecs = np.linalg.eig(cov_init)\n    v = eigvecs[:, np.argmax(eigvals)]\n    v = v / np.linalg.norm(v)\n\n    for iter_id in range(max_iter):\n        # (1) 残差: ri = ||(I - v v^T)(x_i - mu)||\n        r_list = []\n        for i in range(n):\n            diff = X[i] - mu\n            orth = diff - (diff @ v)*v\n            r_list.append(np.linalg.norm(orth))\n        r_arr = np.array(r_list)\n\n        # (2) Huber損失勾配 ψ(r_i) で重みを計算\n        psi_r = huber_loss_deriv(r_arr, delta=delta)\n        w = psi_r / (r_arr + 1e-9)\n\n        # (3) 重み付き平均 mu_new\n        W_sum = np.sum(w)\n        mu_new = (w.reshape(-1,1) * X).sum(axis=0) / (W_sum + 1e-9)\n\n        # (4) 重み付き共分散行列を作って最大固有値ベクトルを得る\n        X_shifted = X - mu_new\n        sqrt_w = np.sqrt(w)\n        X_w = X_shifted * sqrt_w.reshape(-1,1)\n        S = (X_w.T @ X_w) / (np.sum(w) + 1e-9)\n\n        eigvals_w, eigvecs_w = np.linalg.eig(S)\n        v_new = eigvecs_w[:, np.argmax(eigvals_w)]\n        v_new = v_new / np.linalg.norm(v_new)\n\n        # --- 収束判定 ---\n        delta_mu = np.linalg.norm(mu_new - mu)\n        delta_v  = np.linalg.norm(v_new - v)\n        mu = mu_new\n        v  = v_new\n        if delta_mu < tol and delta_v < tol:\n            break\n    \n    return mu, v\n\ndef normal_pca_1d(\n    X,\n    max_iter=20,\n    delta=1.0,\n    tol=1e-5\n):\n    mu = X_data.mean(axis=0)\n    Xc = X_data - mu\n    cov_ = (Xc.T @ Xc) / Xc.shape[0]\n    eigvals_, eigvecs_ = np.linalg.eig(cov_)\n    v = eigvecs_[:, np.argmax(eigvals_)]\n    v = v / np.linalg.norm(v)\n\n    return mu, v\n```\n:::\n\n\n### 実行結果確認\n\nサンプル数を $200$、その内 $15\\%$ を外れ値としました。以下の結果から、ロバストPCAの方が良い結果を推定できていることが確認できます。\n\n::: {#5f4104fb .cell execution_count=4}\n``` {.python .cell-code}\nX_data = generate_2d_gaussian_with_outliers(n=200, outlier_ratio=0.15, random_seed=42)\n\nmu_robust, v_robust = robust_pca_1d(X_data, max_iter=50, delta=2.0, tol=1e-6)\nmu_normal, v_normal  = normal_pca_1d(X_data)\n\nprint(\"Robust PCA:\")\nprint(\"  mu =\", mu_robust)\nprint(\"  v  =\", v_robust)\nprint(\"Normal PCA:\")\nprint(\"  mu =\", mu_normal)\nprint(\"  v  =\", v_normal)\n\nplt.scatter(X_data[:,0], X_data[:,1], alpha=0.6, label=\"data\")\n\ndef plot_vector(mu, v, color, label):\n    t = np.linspace(-20, 20, 200)\n    line = mu[None,:] + t[:,None]*v[None,:]\n    plt.plot(line[:,0], line[:,1], color=color, label=label, linewidth=2)\n\nplot_vector(mu_robust, v_robust, \"red\", \"robust PCA\")\nplot_vector(mu_normal, v_normal, \"blue\", \"normal PCA\")\n\nplt.axis(\"equal\")\nplt.legend()\nplt.title(\"Robust PCA vs Normal PCA (with convergence check)\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRobust PCA:\n  mu = [ 1.79561083 -1.00272666]\n  v  = [0.88451553 0.46651075]\nNormal PCA:\n  mu = [ 1.51322481 -0.85757259]\n  v  = [0.9802391  0.19781633]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](2025-03-16-memo-about-robust-estimation_files/figure-html/cell-4-output-2.png){width=577 height=431}\n:::\n:::\n\n\n## 参考 \n::: {#refs}\n:::\n\n",
    "supporting": [
      "2025-03-16-memo-about-robust-estimation_files"
    ],
    "filters": [],
    "includes": {}
  }
}