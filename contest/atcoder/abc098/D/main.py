#!/usr/bin/env python3
import sys
from itertools import accumulate
from operator import add, xor

def solve(N: int, A: "List[int]"):
    acc_add = [0] +list(accumulate(A, add))
    acc_xor = [0] +list(accumulate(A, xor))

    ret = 0
    j = 0
    for i, (ba, bx) in enumerate(zip(acc_add, acc_xor)):
        while j < N:
            if (acc_add[j+1] - ba) != (acc_xor[j+1] ^ bx):
                break
            j += 1
        ret += j - i
    print(ret)


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
