#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]"):
    dp = [[0] * 4 for i in range(N)]

    dp[0][0] = A[0]
    dp[0][1] = -float('inf')
    dp[0][2] = -float('inf')
    dp[0][3] = -A[0]

    for i in range(1, N):
        a = A[i]
        dp[i][0] = max(dp[i-1][0] + a, dp[i-1][1] + a)
        dp[i][1] = max(dp[i-1][2] - a, dp[i-1][3] - a)
        dp[i][2] = max(dp[i-1][2] + a, dp[i-1][3] + a)
        dp[i][3] = max(dp[i-1][0] - a, dp[i-1][1] - a)
    print(max(dp[-1][:2]))


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [ int(next(tokens)) for _ in range(N) ]  # type: "List[int]"
    solve(N, A)

if __name__ == '__main__':
    main()
