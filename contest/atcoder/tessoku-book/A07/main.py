#!/usr/bin/env python3
import sys
from collections import Counter


def solve(D: int, N: int, L: "List[int]", R: "List[int]"):
    ls = dict(Counter(L))
    rs = dict(Counter(R))

    acc = 0
    for i in range(1, D + 1):
        acc += ls.get(i, 0) - rs.get(i - 1, 0)
        print(acc)


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    D = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    L = [int()] * (N)  # type: "List[int]"
    R = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    solve(D, N, L, R)

if __name__ == '__main__':
    main()
