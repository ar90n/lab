#!/usr/bin/env python3
import sys
import itertools


def solve(H: int, W: int, X: "List[List[int]]", Q: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    acc = [[0] + list(itertools.accumulate(l)) for l in zip(*[[0] + list(itertools.accumulate(x)) for x in X])]
    for a, b, c, d in zip(A, B, C, D):
        a, b = b, a
        c, d = d, c
        ret = acc[c][d] - acc[a - 1][d] - acc[c][b - 1] + acc[a - 1][b - 1]
        print(ret)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    X = [[int(next(tokens)) for _ in range(W)] for _ in range(H)]  # type: "List[List[int]]"
    Q = int(next(tokens))  # type: int
    A = [int()] * (Q)  # type: "List[int]"
    B = [int()] * (Q)  # type: "List[int]"
    C = [int()] * (Q)  # type: "List[int]"
    D = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(H, W, X, Q, A, B, C, D)

if __name__ == '__main__':
    main()
