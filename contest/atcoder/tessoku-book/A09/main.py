#!/usr/bin/env python3
import sys
import itertools


def solve(H: int, W: int, N: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    acc = [[0] * (W + 2) for _ in range(H + 2)]
    for a, b, c, d in zip(A, B, C, D):
        acc[a][b] += 1
        acc[a][d + 1] -= 1
        acc[c + 1][b] -= 1
        acc[c + 1][d + 1] += 1

    acc = list(itertools.accumulate([list(itertools.accumulate(l[1:-1])) for l in  acc], lambda a,b : [_a + _b for _a, _b  in zip(a,b)]))[1:-1]
    for l in acc:
        print(" ".join(map(str, l)))
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    H = int(next(tokens))  # type: int
    W = int(next(tokens))  # type: int
    N = int(next(tokens))  # type: int
    A = [int()] * (N)  # type: "List[int]"
    B = [int()] * (N)  # type: "List[int]"
    C = [int()] * (N)  # type: "List[int]"
    D = [int()] * (N)  # type: "List[int]"
    for i in range(N):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
        D[i] = int(next(tokens))
    solve(H, W, N, A, B, C, D)

if __name__ == '__main__':
    main()
