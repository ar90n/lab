#!/usr/bin/env python3
import sys
import bisect

def bisect_left(A, x):
    left = -1
    right = len(A)

    def is_ok(mid, v):
        return v <= A[mid]

    while 1 < (right - left):
        mid = (right + left) // 2

        if is_ok(mid, x):
            right = mid 
        else:
            left = mid

    return right


    


def solve(N: int, X: int, A: "List[int]"):
    #ret = bisect.bisect_left(A, X) + 1
    ret = bisect_left(A, X) + 1
    print(ret)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, A)

if __name__ == '__main__':
    main()
