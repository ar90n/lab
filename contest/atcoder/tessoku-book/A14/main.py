#!/usr/bin/env python3
import sys
import itertools
import bisect

YES = "Yes"  # type: str


def solve(N: int, K: int, A: "List[int]", B: "List[int]", C: "List[int]", D: "List[int]"):
    cands = {K - (c + d)for c, d in itertools.product(C, D)}
    for a, b in itertools.product(A, B):
        if (a + b) in cands:
            print("Yes")
            break
    else:
        print("No")

    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    C = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    D = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, K, A, B, C, D)

if __name__ == '__main__':
    main()
