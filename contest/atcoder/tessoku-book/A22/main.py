#!/usr/bin/env python3
import sys


def solve(N: int, A: "List[int]", B: "List[int]"):
    dp = [-100000000] * (N + 1)
    dp[1] = 0
    for i in range(1, N):
        dp[A[i - 1]] = max(dp[A[i - 1]], dp[i] + 100)
        dp[B[i - 1]] = max(dp[B[i - 1]], dp[i] + 150)
    print(dp[-1])
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N - 1)]  # type: "List[int]"
    B = [int(next(tokens)) for _ in range(N - 1)]  # type: "List[int]"
    solve(N, A, B)

if __name__ == '__main__':
    main()
