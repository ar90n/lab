#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[List[int]]"):
    dp = [10 ** 12] * 2 ** N
    dp[0] = 0

    for ai in A:
        mask = 0
        for i, a in enumerate(ai):
            mask |= a << i

        for i in range(len(dp)):
            dp[i | mask] = min(dp[i | mask], dp[i] + 1)
    if dp[-1] == 10 ** 12:
        print(-1)
    else:
        print(dp[-1])
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [[int(next(tokens)) for _ in range(N)] for _ in range(M)]  # type: "List[List[int]]"
    solve(N, M, A)

if __name__ == '__main__':
    main()
