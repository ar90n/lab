#!/usr/bin/env python3
import sys


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    g = {i : [] for i in range(N + 1)}
    for a, b in zip(A, B):
        g[a].append(b)
        g[b].append(a)

    visited = [False] * (N + 1)
    def dfs(x):
        if visited[x]:
            return
        visited[x] = True
        for nx in g[x]:
            dfs(nx)

    sys.setrecursionlimit(10 ** 9)
    dfs(1)
    if all(visited[1:]):
        print("The graph is connected.")
    else:
        print("The graph is not connected.")

    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
