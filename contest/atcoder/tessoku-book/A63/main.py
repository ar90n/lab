#!/usr/bin/env python3
import sys
from collections import deque


def solve(N: int, M: int, A: "List[int]", B: "List[int]"):
    g = {i: [] for i in range(N + 1)}
    for a, b in zip(A, B):
        g[a].append(b)
        g[b].append(a)

    visited = [-1] * (N + 1)
    q = deque([(1, 0)])
    while 0 < len(q):
        p, i = q.popleft()
        if 0 <= visited[p]:
            continue
        visited[p] = i
        for np in g[p]:
            q.append((np, i + 1))
    for v in visited[1:]:
        print(v)
    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
    solve(N, M, A, B)

if __name__ == '__main__':
    main()
