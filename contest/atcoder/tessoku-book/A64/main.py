#!/usr/bin/env python3
import sys
import heapq


def solve(N: int, M: int, A: "List[int]", B: "List[int]", C: "List[int]"):
    g = {1: {}}
    for a, b, c in zip(A, B, C):
        g.setdefault(a, {})[b] = c
        g.setdefault(b, {})[a] = c

    dists = [10 ** 12] * (N + 1)
    dists[1] = 0

    q = [(c, b) for b, c in g[1].items()]
    while 0 < len(q):
        c, b = heapq.heappop(q)
        if dists[b] <= c:
            continue
        dists[b] = c

        for nb, nc in g[b].items():
            heapq.heappush(q, (c + nc, nb))
    dists = dists[1:]

    for d in dists:
        if d == 10 ** 12:
            print(-1)
        else:
            print(d)

    return


# Generated by 2.13.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    A = [int()] * (M)  # type: "List[int]"
    B = [int()] * (M)  # type: "List[int]"
    C = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        A[i] = int(next(tokens))
        B[i] = int(next(tokens))
        C[i] = int(next(tokens))
    solve(N, M, A, B, C)

if __name__ == '__main__':
    main()
