snippet ____Graph ""
type cost = float
type vertex = int
type edge = vertex * vertex * cost
type graph = System.Collections.Generic.Dictionary<vertex, cost> array

let DGraph (n : int) (edges : edge list) : graph =
    let g : graph = Array.init n (fun _ -> new System.Collections.Generic.Dictionary< vertex, cost>())
    List.iter (fun (f,t,c) -> g.[f].[t] <- c) edges
    g

let Graph (n : int) (edges : edge list) : graph =
    let redges = List.map (fun (f,t,c) -> (t,f,c)) edges
    DGraph n <| List.append edges redges

let Nodes (g: graph) : int =
    Array.length g

let Edges (g: graph) : edge list =
    seq { for i = 0 to ( Nodes g ) - 1 do yield (i,Seq.zip g.[i].Keys g.[i].Values) } 
    |> Seq.map (fun (f,ts) -> Seq.map (fun (t,c) -> ( f,t,c ) ) ts )
    |> Seq.fold Seq.append Seq.empty
    |> Seq.toList

let Transpose (g : graph) : graph =
    g
    |> Edges 
    |> List.map (fun (f,t,c) -> (t,f,c)) 
    |> DGraph (Nodes g) 

let Dump (g : graph) : unit =
    for i = 0 to (Nodes g) - 1 do
        let v = Seq.zip g.[i].Keys g.[i].Values
        printfn "%d :%A" i v
    done

let Path (g : graph) (src : vertex) (dst : vertex) : vertex list option =
    let nodes = Nodes g
    let visited = Array.create nodes -1
    let queue = new System.Collections.Generic.Queue< vertex * vertex >()
    queue.Enqueue (src, src)
    while( queue.Count <> 0 ) do
        let (f,t) = queue.Dequeue()
        if visited.[t] = -1 then
            visited.[t] <- f
            g.[t].Keys |> Seq.iter ( fun tt -> queue.Enqueue (t,tt) )
    done

    let mutable result = [dst]
    while ( List.head result <> src ) && ( List.head result <> -1 ) do
        let c = List.head result
        result <- visited.[ c ] :: result
    done
    if (List.head result <> -1) then Some result else None
endsnippet

snippet ____Dfs ""
let Dfs (g : graph) (root : vertex) : vertex list * cost array = 
    let nodes = Nodes g
    let visited = Array.create nodes false
    let mutable result = []
    let mutable costs = Array.create nodes 0.0
    let stack = new System.Collections.Generic.Stack< vertex * cost >()
    stack.Push (root, 0.0)
    while( stack.Count <> 0 ) do
        let c,cc = stack.Pop()
        if not visited.[c] then
            visited.[c] <- true
            result <- c :: result
            costs.[c] <- cc
            Seq.zip g.[c].Keys g.[c].Values
            |> Seq.map (fun (i,c) -> (i, cc + c))
            |> Seq.iter stack.Push
    done

    List.rev result, costs
endsnippet

snippet ____Pi ""
let PI : float = 2.0 * asin(1.0)
endsnippet

snippet ____Vector2d ""
type vector2d< ^a when ^a : (static member (+) : ^a * ^a -> ^a)
                   and ^a : (static member (-) : ^a * ^a -> ^a)
                   and ^a : (static member (*) : ^a * ^a -> ^a)
                   and ^a : (static member (/) : ^a * ^a -> ^a)
                   and ^a : (static member (~-) : ^a -> ^a)
                   and ^a : (static member Abs : ^a -> ^a)
                   and ^a : (static member op_Explicit : ^a -> float)
                   and ^a : comparison> =
    {
        x : ^a
        y : ^a
    }

    static member inline (+) (v0, v1) = { x = v0.x + v1.x; y = v0.y + v1.y }
    static member inline (-) (v0, v1) = { x = v0.x - v1.x; y = v0.y - v1.y }
    static member inline (*) (v, k) = { x = k * v.x; y = k * v.y }
    static member inline (*) (k, v) = { x = k * v.x; y = k * v.y }
    static member inline (/) (v, k) = { x = v.x / k; y = v.y / k }
    static member inline (~-) (v) = { x = -v.x; y = -v.y }
    static member inline compare v0 v1 = if compare v0.x v1.x <> 0 then compare v0.x v1.x else compare v0.y v1.y

module Vector2d =
    let inline dot (v0 : ^a vector2d) (v1 : ^a vector2d) : ^a = v0.x * v1.x + v0.y * v1.y
    let inline cross (v0 : ^a vector2d) (v1 : ^a vector2d) : ^a = v0.x * v1.y - v0.y * v1.x
    let inline normL1 (v : ^a vector2d) : ^a = (abs v.x) + (abs v.y)
    let inline normL2 (v : ^a vector2d) : float = dot v v |> float |> sqrt
    let inline isOrthogonal (v0 : ^a vector2d) (v1 : ^a vector2d) : bool = dot v0 v1 |> ((=) Core.LanguagePrimitives.GenericZero)
    let inline isParallel (v0 : ^a vector2d) (v1 : ^a vector2d) : bool = cross v0 v1 |> ((=) Core.LanguagePrimitives.GenericZero)
    let inline project (v0 : ^a vector2d) (v1 : ^a vector2d) : float vector2d = (float (dot v0 v1)) / (normL2 v0) * ({x = float v0.x; y = float v0.y})
    let inline reflect (v0 : ^a vector2d) (v1 : ^a vector2d) : float vector2d = (project v0 v1) + (project v0 v1) - ({x = float v1.x; y = float v1.y})
    let inline toFloat (v : ^a vector2d) : float vector2d = {x = float v.x; y = float v.y}
endsnippet

snippet ____Point2d ""
type relation2d =
    | COUNTER_CLOCKWISE
    | CLOCKWISE
    | ONLINE_BACK
    | ONLINE_FRONT
type point2d< ^a when ^a : (static member (+) : ^a * ^a -> ^a)
                  and ^a : (static member (-) : ^a * ^a -> ^a)
                  and ^a : (static member (*) : ^a * ^a -> ^a)
                  and ^a : (static member (/) : ^a * ^a -> ^a)
                  and ^a : (static member (~-) : ^a -> ^a)
                  and ^a : (static member Abs : ^a -> ^a)
                  and ^a : (static member op_Explicit : ^a -> float)
                  and ^a : comparison> = ^a vector2d
module Point2d =
    open Vector2d
    let eps = 1e-12
    let inline direction (p0 : ^a point2d) (p1 : ^a point2d) : ^a vector2d = { x= p1.x - p0.x; y = p1.y - p0.y }
    let inline distanceL1 v0 v1 = direction v0 v1 |> normL1
    let inline distanceL2 v0 v1 = direction v0 v1 |> normL2
    let inline relation (p0 : ^a point2d) (p1 : ^a point2d) (p2 : ^a point2d) : relation2d =
        let d1 = direction p0 p1
        let d2 = direction p0 p2
        let cross_value = cross d1 d2 |> float
        let dot_value = dot d1 d2 |> float
        match true with
        | _ when eps < cross_value -> COUNTER_CLOCKWISE
        | _ when cross_value < -eps -> CLOCKWISE
        | _ when dot_value < -eps -> ONLINE_BACK
        | _ -> ONLINE_FRONT
endsnippet

snippet ____Segment2d ""
type segment2d< ^a when ^a : (static member (+) : ^a * ^a -> ^a)
                    and ^a : (static member (-) : ^a * ^a -> ^a)
                    and ^a : (static member (*) : ^a * ^a -> ^a)
                    and ^a : (static member (/) : ^a * ^a -> ^a)
                    and ^a : (static member (~-) : ^a -> ^a)
                    and ^a : (static member Abs : ^a -> ^a)
                    and ^a : (static member op_Explicit : ^a -> float)
                    and ^a : comparison> = ^a point2d * ^a point2d
module Segment2d =
    open Vector2d
    open Point2d

    let inline isIntersect (seg0 : ^a segment2d) (seg1 : ^a segment2d) : bool =
        let (p0,p1) = seg0
        let (p2,p3) = seg1
        let check (p0 : ^a vector2d) (p1 : ^a vector2d) (p2 : ^a vector2d) (p3 : ^a vector2d) : bool =
            match (relation p0 p1 p2, relation p0 p1 p3) with
            | (COUNTER_CLOCKWISE, CLOCKWISE)
            | (CLOCKWISE, COUNTER_CLOCKWISE)
            | (ONLINE_FRONT, _)
            | (_, ONLINE_FRONT) -> true
            | _ -> false
        (check p0 p1 p2 p3) && (check p2 p3 p0 p1)

    let inline distanceFromPointL2 (seg : ^a segment2d) (point2d : ^a point2d) : float =
        let (p0,p1) = seg
        let v0 = direction p0 p1
        let v1 = direction p0 point2d
        let v2 = direction p1 point2d
        match true with
        | _ when dot v0 v1 < Core.LanguagePrimitives.GenericZero -> distanceL2 p0 point2d
        | _ when dot (-v0) v2 < Core.LanguagePrimitives.GenericZero -> distanceL2 p0 point2d
        | _ -> cross v0 v1 |> (fun s -> (float s) / (normL2 v0)) |> abs

    let inline distanceL2 (seg0 : ^a segment2d) (seg1 : ^a segment2d) : float =
        let (p0,p1) = seg0
        let (p2,p3) = seg1
        if isIntersect seg0 seg1 then 0.0
        else min (min (distanceFromPointL2 seg0 p2) (distanceFromPointL2 seg0 p3)) (min (distanceFromPointL2 seg1 p0) (distanceFromPointL2 seg1 p1))

    let inline intersecxtPoint (seg0 : ^a segment2d) (seg1 : ^a segment2d) : (float point2d) option =
        if not (isIntersect seg0 seg1) then None
        else
            let (p0,p1) = seg0
            let (p2,p3) = seg1
            let v0 = direction p0 p1
            let v1 = direction p2 p3 |> toFloat
            let d0 = cross v0 <| direction p0  p2 |> abs |> float
            let d1 = cross v0 <| direction p0  p3 |> abs |> float
            let t = d0 / ( d0 + d1 )
            Some ((toFloat p2) + v1 * t)
endsnippet

snippet ____Gcd ""
let rec Gcd a b =
    let (minv, maxv) = (min a b, max a b)
    if minv = 0 then maxv else Gcd (maxv % minv) minv

let Lcm a b =
    a * b / (Gcd a b)
endsnippet

snippet ____Line2d ""
type line2d< ^a when ^a : (static member (+) : ^a * ^a -> ^a)
                 and ^a : (static member (-) : ^a * ^a -> ^a)
                 and ^a : (static member (*) : ^a * ^a -> ^a)
                 and ^a : (static member (/) : ^a * ^a -> ^a)
                 and ^a : (static member (~-) : ^a -> ^a)
                 and ^a : (static member Abs : ^a -> ^a)
                 and ^a : (static member op_Explicit : ^a -> float)
                 and ^a : comparison> =  ^a point2d * ^a vector2d
module Line2d =
    open Vector2d
    open Point2d
    let inline distanceFromPointL2 (line : ^a line2d) (point  : ^a point2d) : float =
        let (p, v0) = line
        direction p point
        |> cross v0
        |> (fun s -> (float s) / (normL2 v0))
        |> abs

endsnippet

snippet ____CountingSort ""
let CountingSort (minv : int) (maxv : int) (vs : int list) =
    let bins = maxv - minv + 1
    let cs = Array.create bins 0
    vs
    |> List.iter (fun v -> let i = v - minv
                           cs.[i] <- cs.[i] + 1)
    [1..bins-1]
    |> List.iter (fun i -> cs.[i] <- cs.[i] + cs.[i - 1])

    let res = Array.create (List.length vs) 0
    vs
    |> List.iter (fun v -> res.[cs.[v]-1] <- v
                           cs.[v] <- cs.[v] - 1)
    Array.toList res
endsnippet

snippet ____PriorityQueue ""
module PriorityQueue =
    type 'a _heap =
        | Empty
        | Node of int * 'a * 'a _heap * 'a _heap

    let rec _merge (comp : 'a -> 'a -> int) (h1 : 'a _heap) (h2 : 'a _heap) =
        let Height = function
            | Empty -> 0
            | Node(h, _, _, _) -> h
        let MakeTree x a b =
            let ha = Height a 
            let hb = Height b
            if ha >= hb then Node(hb + 1, x, a, b) else Node(ha + 1, x, b, a)
        match h1,h2 with
        | x, Empty -> x
        | Empty, x -> x
        | (Node(_, x, l1, r1) as n1), (Node(_, y, l2, r2) as n2) when comp x y <= 0 -> MakeTree x l1 (_merge comp r1 n2)
        | (Node(_, x, l1, r1) as n1), (Node(_, y, l2, r2) as n2) when comp x y > 0 -> MakeTree y l2 (_merge comp n1 r2)
        | _,_ -> failwith "empty"

    let _head (h : 'a _heap) =
        match h with
        | Empty -> failwith "empty"
        | Node(h, x, l, r) -> x

    let _tail (comp : 'a -> 'a -> int) (h : 'a _heap) =
        match h with
        | Empty -> failwith "empty"
        | Node(_, _, l, r) -> _merge comp l r

    type 'a pqueue = ('a -> 'a -> int)  * 'a _heap
    let init (comp : 'a -> 'a -> int)  =
        ( comp , Empty )

    let isEmpty (q : 'a pqueue) : bool =
        q |> function | ( _ , h )  -> h = Empty

    let top (q : 'a pqueue) =
        q |> function | ( _ , h )  -> _head h

    let push (q : 'a pqueue) (v : 'a) =
        q |> function | ( c , h )  -> Node(1,v,Empty,Empty) |> _merge c h |> fun h' -> ( c, h' )

    let pop (q : 'a pqueue) =
        q |> function | ( c , h )  -> (_head h, ( c, _tail c h) )

    let rec toSeq (q : 'a pqueue) =
        q |> pop |> fun (h,t) -> seq{ yield h; yield! toSeq t }
endsnippet

snippet ____Prim ""
let Prim (g : graph) (root : vertex) : graph =
    let nodes = Nodes g
    let visited = Array.create nodes false
    let comp (_,_,a) (_,_,b) = 
        match a,b with
        | _ when a < b -> -1
        | _ when a > b ->  1
        | _ -> 0
    let pqueue = ref <| PriorityQueue.init comp
    Seq.zip g.[root].Keys g.[root].Values |> Seq.iter (fun (t,c) -> pqueue := PriorityQueue.push !pqueue (root,t,c) )

    visited.[root] <- true
    let mutable edges = []
    while( not (PriorityQueue.isEmpty !pqueue) ) do
        let (e,npqueue) = PriorityQueue.pop !pqueue
        let (f,t,c) = e
        pqueue := npqueue

        if not visited.[t] then
            visited.[t] <- true
            edges <- e :: edges
            Seq.zip g.[t].Keys g.[t].Values |> Seq.iter (fun (tt,c) -> pqueue := PriorityQueue.push !pqueue (t,tt,c) )
    done
    DGraph nodes edges
endsnippet

snippet ____BinaryTreeDfs ""
module BinaryTreeDfs =
    open BinaryTree
    type ContStep<'a> =
        | Finished
        | Step of 'a * (unit -> ContStep<'a>)
    let TreeDfs (select : ('a bintree -> (unit -> ContStep<'a>) -> ContStep<'a>) -> 'a -> 'a bintree -> 'a bintree -> (unit -> ContStep<'a>) -> ContStep<'a>) (tree : 'a bintree) : 'a list =
        let rec traverse (tree : 'a bintree) (cont : unit -> ContStep<'a>) =
            match tree with
            | Empty -> cont()
            | Node( x, l, r ) as n ->  select traverse x l r cont
        let rec doit res step : 'a list =
            match step with
            | Finished -> res
            | Step(x, cont) -> doit (x::res) (cont())
        doit [] (traverse tree (fun () -> Finished)) |> List.rev

    let PostOrder = TreeDfs (fun f x l r cont -> f l (fun () -> f r (fun () -> Step( x,cont))) )
    let InOrder = TreeDfs (fun f x l r cont -> f l (fun () -> Step( x, (fun () -> f r cont))))
    let PreOrder = TreeDfs (fun f x l r cont -> Step (x, (fun () -> f l (fun () -> f r cont))))
endsnippet

snippet ____String ""
module String =
    let explode (s:string) =
        [for c in s -> c]

    let implode (xs:char list) =
        let sb = System.Text.StringBuilder(xs.Length)
        xs |> List.iter (sb.Append >> ignore)
        sb.ToString()
endsnippet

snippet ____UnionFind ""
type UnionFind = int[] * int[]

let Root ( uf : UnionFind ) ( i : int ) =
    let (id,sz) = uf
    let mutable q = i
    while ( q <> id.[q] ) do
        id.[q] <- id.[id.[q]]
        q <- id.[q]
    q

let Find ( uf : UnionFind ) ( p : int ) ( q : int ) =
    (Root uf p) = (Root uf q)

let Unite ( uf : UnionFind ) ( p : int ) ( q : int ) =
    let (id,sz) = uf
    let i = Root uf p
    let j = Root uf q
    if sz.[i] < sz.[j] then id.[i] <- j; sz.[j] <- sz.[j] + sz.[i]
    else id.[j] <- i; sz.[i] <- sz.[i] + sz.[j]
endsnippet

snippet ____PowMod ""
let rec PowMod (a: int64) (b : int64) (c : int64) =
    if b = 0L then 1L
    else if ( b % 2L ) = 1L then ( a * ( PowMod a (b - 1L) c ) ) % c
    else 
        let d = PowMod a (b / 2L) c
        ( d * d ) % c
endsnippet

snippet ____Array ""
module Array =
    let evenodd a = Array.foldBack (fun (l,r) x -> x::r,l) a ([],[])
endsnippet

snippet ____List ""
module List =
    let evenodd a = List.foldBack (fun (l,r) x -> x::r,l) a ([],[])
endsnippet

snippet ____PolygonContains ""
type ContainStatus =
    | OUT
    | ON
    | IN
let inline PolygonContains (polygon : (^a point2d) list) (point : ^a point2d) : ContainStatus =
    let eps = 1e-12
    let h = List.head polygon
    let doit (p0 : 'a point2d) (p1 : 'a point2d) =
        let a = if p0.y < p1.y then p0 else p1
        let b = if p0.y < p1.y then p1 else p0
        if ((((float >> abs) (Vector2d.cross a b)) < eps) && ((float (Vector2d.dot a b)) < eps)) then (1,0)
        else if ( ((float a.y) < eps) && (eps < (float b.y)) && (eps < (float (Vector2d.cross a b)))) then (0,1)
        else (0,0)

    List.rev polygon
    |> List.fold (fun (l,p0) p1 -> ((p0,p1)::l,p1)) ([],h)
    |> fst
    |> List.fold (fun (oc,cc) (p0,p1) -> let (no,nc) = doit p0 p1
                                         (oc + no, cc + nc)) (0,0)
    |> (fun (oc,cc) -> match (oc,cc) with
                       | _ when 0 < oc -> ON
                       | _ when 0 < cc -> IN
                       | _ -> OUT)
endsnippet

snippet ____Primes ""
module Primes =
    let mutable primes = [7; 5; 3; 2]
    let mutable upper_bound = 7

    let rec create (n : int) : int list =
        for i = upper_bound + 1 to n do
            if isPrime i then
                primes <- i :: primes
            upper_bound <- i
        done
        List.filter ((>=) n) primes

    and isPrime (n : int) : bool = 
        n / 2
        |> create
        |> List.forall (fun p -> n % p <> 0)

    let factorize (n : int) : int list =
        let rec doit (n : int) (primes : int list) (factors : int list) : int list =
            match primes with
            | hp::tp when n % hp = 0 -> doit (n / hp) primes (hp::factors)
            | hp::tp -> doit n tp factors
            | [] -> factors
        let primes = create n
        doit n primes []
endsnippet

snippet ____TopoSort ""
let TopoSort (g : graph) : vertex list option = 
    let nodes = Nodes g
    let status = Array.create nodes 0
    let result = ref []
    let rec visit (v : vertex) = 
        match status.[v] with
        | 0 -> status.[v] <- 1
               g.[v].Keys |> Seq.iter visit
               status.[v] <- 2
               result := v :: !result
        | 1 -> failwith "has cyclic"
        | _ -> ignore()

    try
        seq {0..(nodes-1)} |> Seq.iter (fun v -> if status.[v] = 0 then visit v)
        Some <| List.rev !result
    with
        | Failure "has cyclic" -> None
endsnippet

snippet ____Dijkstra ""
let Dijkstra (g : graph) (root : vertex) : (graph * cost array) =
    let nodes = Nodes g
    let costs = Array.create nodes System.Double.PositiveInfinity

    let comp (_,a) (_,b) = 
        match a,b with
        | _ when a < b -> -1
        | _ when a > b ->  1
        | _ -> 0
    let pqueue = Edges g |> List.fold (fun q (f,t,c) -> PriorityQueue.push q ((f,t,c),c)) (PriorityQueue.init comp)
    costs.[root] <- 0.0
    let rec doit (costs : cost array) (edges : edge list) (pqueue : (edge * cost) PriorityQueue.pqueue) : cost array * edge list =
        if PriorityQueue.isEmpty pqueue then
            costs, edges
        else
            let (((_,t,c) as e,ac),pqueue') = PriorityQueue.pop pqueue
            if ac < costs.[t] then
                let edges' = e :: edges
                costs.[t] <- ac
                Seq.zip g.[t].Keys g.[t].Values
                |> Seq.map (fun (t',c') -> (t,t',c'))
                |> Seq.fold ( fun q (f,t,c) -> PriorityQueue.push q ((f,t,c), ac + c) ) pqueue'
                |> doit costs edges'
            else
                doit costs edges pqueue'
    let (rc,re ) = doit costs [] pqueue
    DGraph nodes re, rc
endsnippet

snippet ____WarshallFloyd ""
let WarshallFloyd (g : graph) : cost[,] =
    let nodes = Nodes g
    let costs = Array2D.init nodes nodes (fun f t -> if g.[f].ContainsKey t then g.[f].[t] else System.Double.PositiveInfinity)
    for m = 0 to (nodes - 1) do
        for f = 0 to (nodes - 1) do
            for t = 0 to (nodes - 1) do
                costs.[f,t] <- min  costs.[f, t] (costs.[f,m] + costs.[m,t])
            done
        done
    done
    costs
endsnippet

snippet ____BinarySearch ""
let BinarySearch (haystack : 'a array) (needle : 'a) : int option =
    let (lo,hi) = (0, Array.length haystack - 1)
    let rec BinarySearch' (lo : int) (hi : int) =
        let mid = lo + (hi - lo) / 2
        let pivot = haystack.[mid]
        if hi < lo then None
        else if pivot > needle then BinarySearch' lo (mid - 1)
        else if pivot < needle then BinarySearch' (mid+1) hi
        else Some mid
    BinarySearch' lo hi
endsnippet

snippet ____Diameter ""
let Diameter (g : graph) : cost =
    Bfs g 0
    |> snd
    |> Seq.mapi (fun i u -> i,u)
    |> Seq.maxBy snd
    |> fst
    |> Bfs g
    |> snd
    |> Array.max
endsnippet

snippet ____BellmanFord ""
let BellmanFord (g : graph) (root : vertex) : cost list option =
    let nodes = Nodes g
    let result = Array.init nodes ( fun _ -> System.Double.PositiveInfinity)

    let changed = ref false
    result.[root] <- 0.0
    for i = 0 to (nodes - 1) do
        changed := false
        for f = 0 to (nodes - 1) do
            Seq.zip g.[f].Keys g.[f].Values 
            |> Seq.iter (fun (t,c) -> let nc = result.[f] + c
                                      if nc < result.[t] then 
                                        result.[t] <- nc
                                        changed := true )
        done
    done

    if !changed then None else Some (Array.toList result)
endsnippet

snippet ____BinaryTree ""
module BinaryTree =
    type 'a bintree =
        | Empty
        | Node of 'a * 'a bintree * 'a bintree

    let init =
        Empty
endsnippet

snippet ____BinarySearchTree ""
module BinarySearchTree =
    open BinaryTree
    type 'a binsearchtree = ('a -> 'a -> int) * 'a bintree

    let init (comp : 'a -> 'a -> int) : 'a binsearchtree =
        (comp, Empty ) 

    let rec contain (bstree : 'a binsearchtree) (v : 'a) : bool =
        let (comp, tree) = bstree
        let rec contain' (tree : 'a bintree) (v : 'a) : bool =
            match tree with
            | Empty -> false
            | Node( v', lh, rh) when comp v' v <  0 -> contain' rh v
            | Node( v', lh, rh) when comp v  v'<  0 -> contain' lh v
            | _ -> true
        contain' tree v

    let rec min (bstree : 'a binsearchtree) : 'a option =
        let (comp, tree) = bstree
        let rec min' (tree : 'a bintree) : 'a option =
            match tree with
            | Empty -> None
            | Node( v, Empty, _) -> Some v
            | Node( _, lh, _) -> min' lh
        min' tree

    let rec max (bstree : 'a binsearchtree) : 'a option =
        let (comp, tree) = bstree
        let rec max' (tree : 'a bintree) : 'a option =
            match tree with
            | Empty -> None
            | Node( v, _, Empty) -> Some v
            | Node( _, _, rh) -> max' rh
        max' tree

    let rec insert (bstree : 'a binsearchtree) (v : 'a) : 'a binsearchtree=
        let (comp, tree) = bstree
        let rec insert' (tree : 'a bintree) (v : 'a) : 'a bintree =
            match tree with
            | Empty -> Node( v, Empty, Empty)
            | Node( v', lh, rh) when comp v' v  < 0 -> Node( v', lh, insert' rh v)
            | Node( v', lh, rh) when comp v  v' < 0 -> Node( v', insert' lh v, rh)
            | n -> n
        insert' tree v |> (fun t -> (comp, t))

    let rec delete (bstree : 'a binsearchtree) (v : 'a) =
        let (comp, tree) = bstree
        let rec delete' (tree : 'a bintree) (v : 'a) =
            match tree with
            | Empty -> Empty
            | Node( v', lh, rh) when comp v' v  < 0 -> Node( v', lh, delete' rh v)
            | Node( v', lh, rh) when comp v  v' < 0 -> Node( v', delete' lh v, rh)
            | Node( v', lh, Empty) when comp v  v' = 0 -> lh
            | Node( v', Empty, rh) when comp v  v' = 0 -> rh
            | Node( v', Empty, Empty) when comp v  v' = 0 -> Empty
            | Node( v', lh, rh) when comp v  v' = 0 -> match min (comp, rh) with
                                                                  | Some nv -> Node( nv, lh, delete' rh nv )
                                                                  | None -> failwith "Error"
            | _ -> failwith "Error"
        delete' tree v

    let ofList (comp : 'a -> 'a -> int) (lst : 'a list) =
        lst
        |> List.fold (fun tree v -> insert tree v) (init comp)

    let toBinaryTree (bstree : 'a binsearchtree) : 'a bintree =
        snd
endsnippet

snippet ____Bfs ""
let Bfs (g : graph) (root : vertex) : vertex list * cost array = 
    let nodes = Nodes g
    let visited = Array.create nodes false
    let mutable result = []
    let mutable costs = Array.create nodes 0.0
    let queue = new System.Collections.Generic.Queue< vertex * cost >()
    queue.Enqueue (root, 0.0)
    while( queue.Count <> 0 ) do
        let c,cc = queue.Dequeue()
        if not visited.[c] then
            visited.[c] <- true
            result <- c :: result
            costs.[c] <- cc
            Seq.zip g.[c].Keys g.[c].Values
            |> Seq.map (fun (i,c) -> (i, cc + c))
            |> Seq.iter queue.Enqueue
    done

    List.rev result, costs
endsnippet