# You must change these to your own details.
[package]
name = "rust-webpack-template"
description = "My super awesome Rust, WebAssembly, and Webpack project!"
version = "0.1.0"
authors = ["You <you@example.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
#default = ["wee_alloc"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = { version = "0.2.78", features = ["serde-serialize"]}

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = { version = "0.4.2", optional = true }
console_error_panic_hook = "0.1.7"
rand = "0.8.4"
getrandom = { version = "0.2.3", features = ["js"]}
futures = "0.3.17"
wasm-bindgen-futures = "0.4.28"
serde = {version ="1.0.131", features = ["derive"]}
anyhow = "1.0.51"
async-trait = "0.1.52"
js-sys = "0.3.55"

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.33"
features = ["console", "Window", "Document", "HtmlCanvasElement", "Response", "HtmlImageElement", "CanvasRenderingContext2d", "Element", "Performance", "KeyboardEvent", "AudioContext", "AudioBuffer", "AudioBufferSourceNode", "AudioDestinationNode"]

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.3.28"
futures = "0.3.18"
js-sys = "0.3.55"
wasm-bindgen-futures = "0.4.28"
