frameworkVersion: ">=1.2.0 <2.0.0"

service: pref-comp

provider:
  name: aws
  runtime: python3.6
  region: ap-northeast-1
  memorySize: 256
  timeout: 300
  environment:
    SERVERLESS_STAGE: ${opt:stage, self:provider.stage}
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${opt:region, self:provider.region}
    RESAS_API_KEY: ${file(./.env.yml):RESAS_API_KEY}
    RESAS_CACHE_NAME: ${opt:stage, self:provider.stage}-cache
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:*"

plugins:
  - serverless-dynamodb-local
  - serverless-plugin-scripts
  - serverless-plugin-export-endpoints
  - serverless-single-page-app-plugin

package:
  include:
    - handler.py
    - requests
    - requests_cache
    - resaspy
    - jmespath
    - s3transfer
    - docutils
    - dateutil
    - botocore
    - boto3
    - __pycache__
  exclude:
    - requests-*-info/**
    - requests_cache-*-info/**
    - resaspy-*-info/**
    - jmespath-*-info/**
    - s3transfer-*-info/**
    - docutils-*-info/**
    - dateutil-*-info/**
    - botocore-*-info/**
    - boto3-*-info/**
    - node_modules/**
    - setup.cfg
    - serverless.yml
    - packages.txt
    - client/**
    - serverless-single-page-app-plugin/**
    - .serverless/**
    - .git/**
    - .*

custom:
  dynamodb:
    start:
      port: 8000
      migration: true
  exportEndpoints:
    path: './client/src/assets/endpoints.json'
  scripts:
    commands:
      'clientBuild': npm run build --prefix ./client --cwd ./client
      'clientStart': npm run start --prefix ./client --cwd ./client
  s3Bucket: ${self:provider.environment.SERVERLESS_STAGE}-pref-comp-ar90n-net

functions:
  category:
    handler: handler.category
    events:
      - http:
          method: GET
          cors: true
          path: category
          integration: lambda-proxy
  area:
    handler: handler.area
    events:
      - http:
          method: GET
          cors: true
          path: area
          integration: lambda-proxy
  companies:
    handler: handler.companies
    events:
      - http:
          method: GET
          cors: true
          path: companies
          integration: lambda-proxy
  plants:
    handler: handler.plants
    events:
      - http:
          method: GET
          cors: true
          path: plants
          integration: lambda-proxy
  foundation:
    handler: handler.foundation
    events:
      - http:
          method: GET
          cors: true
          path: foundation
          integration: lambda-proxy
  taxes:
    handler: handler.taxes
    events:
      - http:
          method: GET
          cors: true
          path: taxes
          integration: lambda-proxy
  job:
    handler: handler.job
    events:
      - http:
          method: GET
          cors: true
          path: job
          integration: lambda-proxy
  manufacture:
    handler: handler.manufacture
    events:
      - http:
          method: GET
          cors: true
          path: manufacture
          integration: lambda-proxy
  employee:
    handler: handler.employee
    events:
      - http:
          method: GET
          cors: true
          path: employee
          integration: lambda-proxy
  value:
    handler: handler.value
    events:
      - http:
          method: GET
          cors: true
          path: value
          integration: lambda-proxy
  labor:
    handler: handler.labor
    events:
      - http:
          method: GET
          cors: true
          path: labor
          integration: lambda-proxy
  surplus:
    handler: handler.surplus
    events:
      - http:
          method: GET
          cors: true
          path: surplus
          integration: lambda-proxy
  wages:
    handler: handler.wages
    events:
      - http:
          method: GET
          cors: true
          path: wages
          integration: lambda-proxy
  sales:
    handler: handler.sales
    events:
      - http:
          method: GET
          cors: true
          path: sales
          integration: lambda-proxy
  forestry_income:
    handler: handler.forestry_income
    events:
      - http:
          method: GET
          cors: true
          path: forestry_income
          integration: lambda-proxy
  fishery_sales:
    handler: handler.fishery_sales
    events:
      - http:
          method: GET
          cors: true
          path: fishery_sales
          integration: lambda-proxy
  aquaculture_sales:
    handler: handler.aquaculture_sales
    events:
      - http:
          method: GET
          cors: true
          path: aquaculture_sales
          integration: lambda-proxy

resources:
  Resources:
    Cache:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.RESAS_CACHE_NAME}
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 8
          WriteCapacityUnits: 8
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: PrefCompAr90nNet
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
            - pref-comp.ar90n.net
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: PrefCompAr90nNet
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
